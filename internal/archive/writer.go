package archive

import (
	"archive/tar"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"bytes"
	"tachyon/internal/security"

	"github.com/klauspost/compress/zstd"
)

func CreateTPK(inputDir string, outputFile string) error {
	tempFile := outputFile + ".tmp"
	out, err := os.Create(tempFile)
	if err != nil {
		return err
	}
	defer out.Close()

	headerPlaceholder := make([]byte, 97) // 32 (SHA-256) + 1 (–¥–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏) + 64 (–ø–æ–¥–ø–∏—Å—å)
	_, err = out.Write(headerPlaceholder)
	if err != nil {
		return err
	}

	var archiveBuffer bytes.Buffer
	hasher := sha256.New()
	multiWriter := io.MultiWriter(&archiveBuffer, hasher)

	zstdWriter, err := zstd.NewWriter(multiWriter)
	if err != nil {
		return err
	}
	defer zstdWriter.Close()

	tarWriter := tar.NewWriter(zstdWriter)
	defer tarWriter.Close()

	err = filepath.Walk(inputDir, func(filePath string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		relPath, err := filepath.Rel(inputDir, filePath)
		if err != nil {
			return err
		}

		header, err := tar.FileInfoHeader(info, relPath)
		if err != nil {
			return err
		}
		header.Name = relPath

		err = tarWriter.WriteHeader(header)
		if err != nil {
			return err
		}

		if !info.IsDir() {
			file, err := os.Open(filePath)
			if err != nil {
				return err
			}
			defer file.Close()

			_, err = io.Copy(tarWriter, file)
			if err != nil {
				return err
			}
		}

		fmt.Println("–î–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤:", relPath)
		return nil
	})

	if err != nil {
		return err
	}

	tarWriter.Close()
	zstdWriter.Close()

	hash := hasher.Sum(nil)

	signature, err := security.SignSHA256(hex.EncodeToString(hash))
	signatureBytes := make([]byte, 64) // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å—å –≤—Å–µ–≥–¥–∞ 64 –±–∞–π—Ç–∞
	signatureLen := byte(0)

	if err == nil {
		sigDecoded, _ := hex.DecodeString(signature)
		copy(signatureBytes[:], sigDecoded) // –ó–∞–ø–æ–ª–Ω—è–µ–º `signatureBytes` –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
		signatureLen = 64
		fmt.Println("‚úÖ –§–∞–π–ª –ø–æ–¥–ø–∏—Å–∞–Ω.")
	} else {
		fmt.Println("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë.")
	}

	_, err = out.WriteAt(hash, 0)                           // 32 –±–∞–π—Ç–∞ SHA-256
	_, err = out.WriteAt([]byte{signatureLen}, 32)         // 1 –±–∞–π—Ç –¥–ª–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∏
	_, err = out.WriteAt(signatureBytes[:signatureLen], 33) // 64 –±–∞–π—Ç–∞ –ø–æ–¥–ø–∏—Å–∏ (–∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)

	_, err = io.Copy(out, &archiveBuffer)
	if err != nil {
		return err
	}

	err = os.Rename(tempFile, outputFile)
	if err != nil {
		return err
	}

	fmt.Println("üì¶ –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–ø–∞–∫–æ–≤–∞–Ω:", outputFile)
	return nil
}