package security

import (
	"crypto/ed25519"
	"encoding/hex"
	"fmt"
	"os"
)

func SignSHA256(hash string) (string, error) {
	privData, err := os.ReadFile("tachyon.priv")
	if err != nil {
		return "", fmt.Errorf("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–¥–ø–∏—Å—å –ø—Ä–æ–ø—É—â–µ–Ω–∞")
	}

	privKey, err := hex.DecodeString(string(privData))
	if err != nil {
		return "", err
	}

	signature := ed25519.Sign(privKey, []byte(hash))
	return hex.EncodeToString(signature), nil
}

func VerifySHA256(hash string, signature string) error {
	pubData, err := os.ReadFile("tachyon.pub")
	if err != nil {
		return fmt.Errorf("üîì –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–¥–ø–∏—Å—å –ø—Ä–æ–ø—É—â–µ–Ω–∞")
	}

	pubKey, err := hex.DecodeString(string(pubData))
	if err != nil {
		return err
	}

	sigBytes, err := hex.DecodeString(signature)
	if err != nil {
		return err
	}

	if !ed25519.Verify(pubKey, []byte(hash), sigBytes) {
		return fmt.Errorf("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞! –§–∞–π–ª –º–æ–≥ –±—ã—Ç—å –ø–æ–¥–º–µ–Ω—ë–Ω")
	}

	return nil
}